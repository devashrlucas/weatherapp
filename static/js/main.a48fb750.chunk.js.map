{"version":3,"sources":["Components/Header.js","Components/CurrentWeather.js","Components/ErrorMessage.js","Components/App.js","Tests/serviceWorker.js","index.js"],"names":["Header","CurrentWeather","weather","id","className","city","temp","description","highestTemp","lowestTemp","humidity","wind","ErrorMessage","App","useState","zipcode","setZipcode","setWeather","mainIcon","setMainIcon","hasError","setHasError","current_url","process","useEffect","document","getElementById","setAttribute","onSubmit","e","preventDefault","zip","length","alert","type","placeholder","onChange","target","value","onKeyUp","key","fetch","then","response","json","data","cod","current","name","country","sys","main","Math","round","temp_max","temp_min","clouds","all","speed","style","visibility","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a48fb750.chunk.js","sourcesContent":["import React from 'react';\nimport '../Styles/Header.css';\n\nfunction Header() {\n    return(\n        <div>\n            <h1>Today's Forecast</h1>\n        </div>\n    )\n}\n\nexport default Header;","import React, { useState, useEffect } from 'react';\nimport '../Styles/CurrentWeather.css';\n\n\nconst CurrentWeather = ({weather}) => {\n  \n    return (\n      <div>\n        <div id=\"container\">\n          <ul>\n            <li></li>\n            <div className=\"weather\" id=\"description\">\n              <li>\n                <h2>{weather.city}</h2>\n              </li>\n              <li>Current Temperature: {weather.temp} °F </li>\n              <li>Current Condition: {weather.description}</li>\n              <div className=\"WeatherIcon\" id=\"main\">\n                <li> {\"\"} </li>\n              </div>\n            </div>\n            <div className=\"weather\" id=\"temperatures\">\n              <li>Highest Temperature: {weather.highestTemp} °F</li>\n              <li>Lowest Temperature: {weather.lowestTemp} °F</li>\n            </div>\n            <div className=\"weather\" id=\"air\">\n              <li>Humidity: {weather.humidity} %</li>\n              <li>Wind Speed: {weather.wind} mph</li>\n            </div>\n          </ul>\n        </div>\n      </div>\n    );\n}\n\nexport default CurrentWeather;","import React from 'react';\nimport '../Styles/ErrorMessage.css'\n\nfunction ErrorMessage() {\n\n    return (\n      <div>\n        <div id=\"error\">Oops! City not found. Try another zipcode.</div>\n      </div>\n    );\n}\n\nexport default ErrorMessage;","import React, { useState, useEffect } from 'react';\nimport '../Styles/App.css';\nimport Header from \"./Header\";\nimport CurrentWeather from './CurrentWeather';\nimport ErrorMessage from './ErrorMessage';\n\n\n\nfunction App() {\n   const [zipcode, setZipcode] = useState(\"\");\n   const [weather, setWeather] = useState([]);\n   const [mainIcon, setMainIcon] = useState(\"\");\n   const [hasError, setHasError] = useState(false);\n\n  const API_KEY= process.env.REACT_APP_WEATHER_API_KEY;\n  const current_url =  `https://api.openweathermap.org/data/2.5/weather?zip=${zipcode},us&units=imperial&appid=${API_KEY}`;\n  //\n  \n  \n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(current_url)\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          if(data.cod === \"404\") {\n            setHasError(true);\n            setZipcode(\"\");\n            setMainIcon(\"main\");\n          } else {\n            setHasError(false);\n          const current = {\n            city: data.name,\n            country: data.sys.country,\n            description: data.weather[0].description,\n            main: data.weather[0].main,\n            temp: Math.round(data.main.temp),\n            highestTemp: Math.round(data.main.temp_max),\n            lowestTemp: Math.round(data.main.temp_min),\n            clouds: data.clouds.all,\n            humidity: data.main.humidity,\n            wind: Math.round(data.wind.speed),\n          };\n          const main = current.main;\n          setWeather(current);\n          setZipcode(\"\");\n          setMainIcon(main);\n          document.getElementById(\"container\").style.visibility = \"visible\";\n        }});\n    }\n  };\n\n    const validateZipcode = (e) => {\n      e.preventDefault();\n      let zip = {zipcode};\n      const errorMessage = \"Please enter a 5 digit zipcode.\"\n      if (zip.zipcode.length !== 5 && typeof zip.zipcode !==\"number\") {\n        alert(errorMessage);\n      }\n    }\n\n  \n  //Using a pattern similar to componentDidMount. React monitors array values for change after the render cycle is complete.\n  useEffect(() => {\n    switch (mainIcon) {\n      case \"Thunderstorm\":\n        document.getElementById(\"main\").setAttribute(\"icon\", \"main-thunderstorm\");\n        break;\n      case \"Drizzle\":\n        document.getElementById(\"main\").setAttribute(\"icon\", \"main-drizzle\");\n        break;\n      case \"Rain\":\n        document.getElementById(\"main\").setAttribute(\"icon\",\"main-rain\");\n        break;\n      case \"Snow\":\n        document.getElementById(\"main\").setAttribute(\"icon\", \"main-snow\");\n        break;\n      case \"Atmosphere\":\n        document.getElementById(\"main\").setAttribute(\"icon\", \"main-atmosphere\");\n        break;\n      case \"Clear\":\n        document.getElementById(\"main\").setAttribute(\"icon\", \"main-clear\");\n        break;\n      case \"Clouds\":\n        document.getElementById(\"main\").setAttribute(\"icon\", \"main-clouds\");\n        break;\n    }\n  }, [mainIcon])  \n\n \n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"Search\">\n        <form onSubmit={validateZipcode}>\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Enter zipcode\"\n            onChange={(e) => setZipcode(e.target.value)}\n            value={zipcode}\n            onKeyUp={search}\n          />\n        </form>\n      </div>\n      <div>\n        {hasError ? <ErrorMessage /> : <CurrentWeather weather={weather} error={hasError}/>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from \"./Components//App\";\nimport * as serviceWorker from './Tests/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}